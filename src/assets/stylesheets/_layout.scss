///////////////////////////
// Utility styles
///////////////////////////


@mixin padding-x($count:10) {
  @for $i from 0 through $count {
    .padding-#{$i} {
      padding: #{$i}px;
    }
    .padding-top-#{$i} {
      padding-top: #{$i}px;
    }
    .padding-left-#{$i} {
      padding-left: #{$i}px;
    }
    .padding-bottom-#{$i} {
      padding-bottom: #{$i}px;
    }
    .padding-right-#{$i} {
      padding-right: #{$i}px;
    }
  }
}

@mixin margin-x($count:10) {
  @for $i from 0 through $count {
    .margin-#{$i} {
      margin: #{$i}px;
    }
    .margin-top-#{$i} {
      margin-top: #{$i}px;
    }
    .margin-left-#{$i} {
      margin-left: #{$i}px;
    }
    .margin-bottom-#{$i} {
      margin-bottom: #{$i}px;
    }
    .margin-right-#{$i} {
      margin-right: #{$i}px;
    }
  }
}

@include padding-x;
@include margin-x;

.width-100
{
  width:100%;
}

.height-100
{
  height:100%;
}

.overflow-auto{
  overflow: auto;
}

.fill-container
{
  position:absolute;
  top:0px;
  bottom:0px;
  left:0px;
  right:0px;
  padding:0;
  margin:0px;
  border-width:0px;
}


@import 'layout-debug';

///////////////////////
// Styles relating to general html document
///////////////////////

*{
  box-sizing: border-box;
}

body
{
  // Ensure that body element height at 'least' fills the viewport.
  // This means it can grow beyond, but wont be less
  min-height:100vh;
  @include debug-stretch-to-fit-viewport;
  position:relative;
  margin:0px;
  padding:0px;
  display:flex;
}

//////////////////////
// flex utility styles
//////////////////////

@mixin flex-grow-x($count:12) {
  @for $i from 1 through $count {
  .flex-grow-#{$i} { flex: $i; }
  }
}
// create 12 flex grow partitions
@include flex-grow-x;


.flex-container
{
    display:flex;
    &.in-column-direction
    {
      flex-direction: column;
    }
    &.in-row-direction
    {
      flex-direction: row;
    }
    // Make sure the main,section,aside parts fill the screen and collapse header and footer if not there
    >main,section,aside
    {
      @extend .flex-grow-1;
    }

}


.app{
  @extend .flex-grow-1;
  @extend .flex-container;
};

// an app component is a marker class for angular component dom elements
.app-component
{
  //root app component
  &.app
  {
    >header{

    }
    >main
    {
    }
    >footer{
      .footer
      {
        text-align: $textCenter;
        font-size: $font-size-small;
        border-top: 1px solid $color-pf-blue-300;
      }

    }
  }

  // when app-component is the child of a bootstrap column div
  div[class^="col-"] &
  {
    // margin-left:-$grid-gutter-width/2;
    // margin-right:-$grid-gutter-width/2;
  }
  div[class*=" col-"] &
  {
    // margin-left:-$grid-gutter-width/2;
    // margin-right:-$grid-gutter-width/2;
  }

  // Note: making relative positioning helps positioning but creates extra margins
  // on nested components, but it offers good absolute positioning options for
  // child elements
  position:relative;
  @include debug-app-component;

};

$content-padding:0px;

header
{
  padding:$content-padding;
}

footer
{
  padding:$content-padding;
}

// helps to ensure that scrolling does not cross app footer or header
.view-container
{
  position:relative;
  >.view
  {
    @extend .fill-container;
    &.with-rows
    {
      padding-left:$grid-gutter-width/2;
      padding-right:$grid-gutter-width/2;
    }
    >main,section,aside{
      padding:$content-padding;
      overflow: auto;
    }
  }
}

// pf overrides
// $color-pf-white;
// $color-pf-blue-300
// $font-size-small
// font-size: em(18);


.dropdown {
  a:hover {
    text-decoration: none;
  }

  a {
    color: white;
  }

}


