import { ElementFinder } from 'protractor';
import * as ui from './../../ui';
export declare class WorkItemQuickPreview extends ui.BaseElement {
    loadingAnimation: ui.BaseElementArray;
    notificationToast: ui.BaseElementArray;
    closeButton: ui.Button;
    iterationDropdownCloseButton: ui.Button;
    areaDropdownCloseButton: ui.Button;
    typeDropdownCloseButton: ui.Button;
    stateDropdownCloseButton: ui.Button;
    stateDiv: ui.BaseElement;
    stateDropdown: ui.Dropdown;
    typeDiv: ui.BaseElement;
    typeDropdown: ui.Dropdown;
    fullDetailButton: ui.Clickable;
    titleDiv: ui.BaseElement;
    titleInput: ui.TextInput;
    titleSaveButton: ui.Button;
    titleCancelButton: ui.Button;
    titleErrorMessage: ui.BaseElement;
    linkCount: ui.Clickable;
    assigneeSection: ui.BaseElement;
    assigneeDropdownSelector: ui.BaseElement;
    assigneeDropdown: ui.Dropdown;
    assigneeDropdownCloseButton: ui.Button;
    assigneeDropdownMenu: ui.BaseElement;
    assigneeDiv: ui.BaseElement;
    areaDiv: ui.BaseElement;
    areaDropdown: ui.Dropdown;
    iterationDiv: ui.BaseElement;
    iterationDropdown: ui.Dropdown;
    iterationInput: ui.TextInput;
    labelDropdown: ui.Dropdown;
    labelsDiv: ui.BaseElement;
    labels: ui.BaseElement;
    labelListDiv: ui.BaseElementArray;
    labelDropDownDiv: ui.BaseElement;
    labelDropdownCloseButton: ui.Clickable;
    createLabelButton: ui.Clickable;
    createLabelDiv: ui.BaseElement;
    createLabelInput: ui.TextInput;
    createLabelCancel: ui.Button;
    createLabelSaveButton: ui.Button;
    descriptionDiv: ui.BaseElement;
    descriptionEditIcon: ui.Clickable;
    descriptionTextarea: ui.TextInput;
    descriptionSaveButton: ui.Button;
    descriptionCancelButton: ui.Button;
    creatorusername: ui.BaseElement;
    creatorAvatar: ui.BaseElement;
    linksDiv: ui.BaseElement;
    linksToggleButton: ui.Clickable;
    linkTypeDiv: ui.BaseElement;
    linkTypeDropdown: ui.Dropdown;
    linkSearchDiv: ui.BaseElement;
    linkSearchDropdown: ui.Dropdown;
    searchWorkItem: ui.TextInput;
    workItemList: ui.BaseElementArray;
    linkButton: ui.Button;
    linklistItem: ui.BaseElement;
    commentsToggleButton: ui.Clickable;
    creationTimeDiv: ui.BaseElement;
    commentDiv: ui.BaseElement;
    commentsField: ui.Clickable;
    commentsInputField: ui.TextInput;
    commentSaveButton: ui.Button;
    commentCancelButton: ui.Button;
    commentsText: ui.BaseElementArray;
    commentsCount: ui.BaseElement;
    commentsEditIcon: ui.Clickable;
    effortTextArea: ui.TextInput;
    workItemsGroup: ui.Clickable;
    businessValue: ui.TextInput;
    storyPoints: ui.TextInput;
    dynamicFieldDiv: ui.BaseElement;
    dynamicFieldSaveButton: ui.Button;
    constructor(ele: ElementFinder, name?: string);
    ready(): Promise<void>;
    addAssignee(assignee: string): Promise<void>;
    addArea(areaTitle: string): Promise<void>;
    addIteration(iterationTitle: string): Promise<void>;
    typeaHeadSearch(iterationTitle: string): Promise<void>;
    private addComment;
    addCommentAndSave(comment: string): Promise<void>;
    addCommentAndCancel(comment: string): Promise<void>;
    addLabel(label: string, unassignLabel?: boolean): Promise<void>;
    addLink(linkType: string, workItem: string): Promise<void>;
    removeLink(workItem: string): Promise<void>;
    createNewLabel(label: string, isPressEnter?: boolean): Promise<void>;
    close(): Promise<void>;
    getArea(): Promise<string>;
    getCreator(): Promise<string>;
    getCreatorAvatar(): Promise<string>;
    getAssignees(): Promise<string>;
    getComments(): Promise<String>;
    getCreationTime(): Promise<string>;
    getDescription(): Promise<string>;
    getIteration(): Promise<string>;
    getType(): Promise<string>;
    getState(): Promise<string>;
    getLabels(): Promise<String>;
    getLinkedItems(): Promise<string>;
    updateTitle(title: string, append?: boolean): Promise<void>;
    updateDescription(description: string, append?: boolean): Promise<void>;
    openDescriptionBox(): Promise<void>;
    isSaveButtonDisplayed(): Promise<boolean>;
    removeAssignee(assignee: string): Promise<void>;
    getTitleError(): Promise<string>;
    changeStateTo(state: string): Promise<void>;
    changeTypeTo(type: string): Promise<void>;
    updateEffort(effort: string): Promise<void>;
    updateBusinessValue(businessValue: string): Promise<void>;
    isDynamicFieldSaveButtonDisplayed(): Promise<boolean>;
}
